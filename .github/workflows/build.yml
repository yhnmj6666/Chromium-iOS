name: Build iOS IPA

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-15

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: remove simulators
      run: |
        # Check if jq is installed
        if ! command -v jq &> /dev/null
        then
            echo "jq is not installed. Please install it using 'brew install jq' or your package manager."
            echo "Exiting script."
            exit 1
        fi

        # Get simulator list in JSON format
        SIMULATORS_JSON=$(xcrun simctl list -j devices)

        # Define the target iOS version to KEEP
        TARGET_IOS_VERSION="iOS 18.5"

        # Initialize an array to store UDIDs of simulators to delete
        SIMULATORS_TO_DELETE=()

        echo "Identifying simulators to delete (keeping $TARGET_IOS_VERSION)..."

        # Parse the JSON output to find simulators that are NOT iOS 18.5
        # We iterate through each device, check if it's an iOS simulator,
        # and if its runtime name does not contain the TARGET_IOS_VERSION.
        # Note: The runtime name typically includes the OS version (e.g., "iOS 18.5").
        # We also ensure it's a valid device and not a placeholder.
        jq -r '.devices | to_entries[] | .value[] | select(.deviceTypeID | contains("iPhone") or contains("iPad")) | select(.isAvailable == true) | select(.runtime.name | contains("iOS")) | "\(.udid) \(.name) \(.runtime.name)"' <<< "$SIMULATORS_JSON" | while read -r UDID NAME RUNTIME_NAME; do
            if [[ "$RUNTIME_NAME" != *"$TARGET_IOS_VERSION"* ]]; then
                echo "  - Found to delete: $NAME ($UDID) running $RUNTIME_NAME"
                SIMULATORS_TO_DELETE+=("$UDID")
            else
                echo "  - Keeping: $NAME ($UDID) running $RUNTIME_NAME"
            fi
        done

    - name: Install depot_tools
      run: |
        # sudo rm -r -f /Users/runner/Library/Android
        # xcrun simctl runtime delete all
        # sudo rm -r -f /Users/runner/.dotnet
        # sudo rm -r -f /Applications/Xcode_16.1.app
        # sudo rm -r -f /Applications/Xcode_16.2.app
        # sudo rm -r -f /Applications/Xcode_16.3.app
        # sudo rm -r -f "$AGENT_TOOLSDIRECTORY"
        # mkfile -n 100g test100g
        # rm test100g
        xcrun simctl runtime list
        df -h
        exit 1
        cd $HOME
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo ":$HOME/depot_tools:$HOME/depot_tools/python-bin" >> $GITHUB_PATH

    - name: Fetch Chromium Source
      run: |
        cd $HOME
        mkdir -p ~/chromium && cd ~/chromium
        fetch --no-history ios 
        cd src
        sed -i '' 's/26.0/18.4/g' ./build/config/ios/ios_sdk_overrides.gni
        cat ./build/config/ios/ios_sdk_overrides.gni
        gclient sync

    - name: Generate Build Files
      run: |
        cd ~/chromium/src && mkdir -p out/Release-iphoneos
        gn gen out/Release-iphoneos --args='is_debug=false target_os="ios" ios_enable_code_signing=false is_component_build=false target_environment="device" target_cpu="arm64" use_blink=true'

    - name: Build Chromium for iOS
      continue-on-error: true
      run: |
        cd ~/chromium/src
        autoninja -C out/Release-iphoneos chrome

    - name: Create .ipa File
      run: |
        cd ~/chromium/src/out/Release-iphoneos
        mkdir -p Payload
        cp -r chromium.app Payload/
        zip -r chromium.ipa Payload
        zip -r everything.zip siso_output siso.INFO siso_failed_commands.sh
        df -h

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: ~/chromium/src/out/Release-iphoneos/chromium.ipa

    - name: Upload Everything
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: ~/chromium/src/out/Release-iphoneos/everything.zip
